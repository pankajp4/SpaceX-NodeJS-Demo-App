#!/usr/bin/env node
// import all library/packages required for this module/file
require("dotenv").config();

// import all library/packages required for this module/file
let app;
if (process.env.NODE_ENV === "prod") app = require("../build/app");
else app = require("../src/app");

const debug = require("debug")("SpaceX-NodeJS-Demo-App:server");
const http = require("http");

// get port from environment file and set it for express
const port = normalizePort(process.env.PORT || "4000");

// set port number for express server
app.set("port", port);

// create node HTTP server
const server = http.createServer(app);

// listen on provided port
server.listen(port);

// handle server evets for listening
server.on("listening", onServerListening);

// handle server evets for error
server.on("error", onServerError);

/**
 * Normalize a input port number into a number, string, or false.
 *
 * @param {Number|String} portNumber port number used by app
 * 
 * @returns {Number|Boolean} normalized port number
 */
function normalizePort(portNumber) {
	const port = parseInt(portNumber, 10);

	if (isNaN(port)) return portNumber;
	else if (port >= 0) return port;

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 *
 * @param {Number|String} portNumber port number used by app
 * 
 * @returns {Void}
 */
function onServerError(error) {
	if (error.syscall !== "listen") throw error;

	const bind = (typeof port === "string") ? "Pipe " + port : "Port " + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
	case "EACCES":
		console.error(bind + " requires elevated privileges");
		process.exit(1);
		break;
	case "EADDRINUSE":
		console.error(bind + " is already in use");
		process.exit(1);
		break;
	default:
		throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 *
 * @param {Number|String} portNumber port number used by app
 * 
 * @returns {Void}
 */
function onServerListening() {
	// get server address info
	const addr = server.address();
  
	const bind = (typeof addr === "string") ? "pipe " + addr : "port " + addr.port;
	debug("Listening on " + bind);
}
